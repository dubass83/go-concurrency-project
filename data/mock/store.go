// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dubass83/go-concurrency-project/data/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	data "github.com/dubass83/go-concurrency-project/data/sqlc"
	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeletePlan mocks base method.
func (m *MockStore) DeletePlan(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlan indicates an expected call of DeletePlan.
func (mr *MockStoreMockRecorder) DeletePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlan", reflect.TypeOf((*MockStore)(nil).DeletePlan), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserByID mocks base method.
func (m *MockStore) DeleteUserByID(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockStoreMockRecorder) DeleteUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockStore)(nil).DeleteUserByID), arg0, arg1)
}

// DeleteUserPlan mocks base method.
func (m *MockStore) DeleteUserPlan(arg0 context.Context, arg1 pgtype.Int4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPlan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPlan indicates an expected call of DeleteUserPlan.
func (mr *MockStoreMockRecorder) DeleteUserPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPlan", reflect.TypeOf((*MockStore)(nil).DeleteUserPlan), arg0, arg1)
}

// GetAllPlans mocks base method.
func (m *MockStore) GetAllPlans(arg0 context.Context, arg1 data.GetAllPlansParams) ([]data.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlans", arg0, arg1)
	ret0, _ := ret[0].([]data.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlans indicates an expected call of GetAllPlans.
func (mr *MockStoreMockRecorder) GetAllPlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlans", reflect.TypeOf((*MockStore)(nil).GetAllPlans), arg0, arg1)
}

// GetAllUserPlans mocks base method.
func (m *MockStore) GetAllUserPlans(arg0 context.Context, arg1 data.GetAllUserPlansParams) ([]data.UserPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserPlans", arg0, arg1)
	ret0, _ := ret[0].([]data.UserPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserPlans indicates an expected call of GetAllUserPlans.
func (mr *MockStoreMockRecorder) GetAllUserPlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserPlans", reflect.TypeOf((*MockStore)(nil).GetAllUserPlans), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockStore) GetAllUsers(arg0 context.Context, arg1 data.GetAllUsersParams) ([]data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockStoreMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockStore)(nil).GetAllUsers), arg0, arg1)
}

// GetOnePlan mocks base method.
func (m *MockStore) GetOnePlan(arg0 context.Context, arg1 int32) (data.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnePlan", arg0, arg1)
	ret0, _ := ret[0].(data.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnePlan indicates an expected call of GetOnePlan.
func (mr *MockStoreMockRecorder) GetOnePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnePlan", reflect.TypeOf((*MockStore)(nil).GetOnePlan), arg0, arg1)
}

// GetOneUser mocks base method.
func (m *MockStore) GetOneUser(arg0 context.Context, arg1 int32) (data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUser", arg0, arg1)
	ret0, _ := ret[0].(data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUser indicates an expected call of GetOneUser.
func (mr *MockStoreMockRecorder) GetOneUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUser", reflect.TypeOf((*MockStore)(nil).GetOneUser), arg0, arg1)
}

// GetOneUserPlan mocks base method.
func (m *MockStore) GetOneUserPlan(arg0 context.Context, arg1 pgtype.Int4) (data.UserPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUserPlan", arg0, arg1)
	ret0, _ := ret[0].(data.UserPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUserPlan indicates an expected call of GetOneUserPlan.
func (mr *MockStoreMockRecorder) GetOneUserPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUserPlan", reflect.TypeOf((*MockStore)(nil).GetOneUserPlan), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 pgtype.Text) (data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// InsertUser mocks base method.
func (m *MockStore) InsertUser(arg0 context.Context, arg1 data.InsertUserParams) (data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockStoreMockRecorder) InsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockStore)(nil).InsertUser), arg0, arg1)
}

// InsertUserPlan mocks base method.
func (m *MockStore) InsertUserPlan(arg0 context.Context, arg1 data.InsertUserPlanParams) (data.UserPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserPlan", arg0, arg1)
	ret0, _ := ret[0].(data.UserPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserPlan indicates an expected call of InsertUserPlan.
func (mr *MockStoreMockRecorder) InsertUserPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserPlan", reflect.TypeOf((*MockStore)(nil).InsertUserPlan), arg0, arg1)
}

// SubscribeUserToPlan mocks base method.
func (m *MockStore) SubscribeUserToPlan(arg0 context.Context, arg1 data.SubscribeUserToPlanParams) (data.SubscribeUserToPlanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeUserToPlan", arg0, arg1)
	ret0, _ := ret[0].(data.SubscribeUserToPlanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeUserToPlan indicates an expected call of SubscribeUserToPlan.
func (mr *MockStoreMockRecorder) SubscribeUserToPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeUserToPlan", reflect.TypeOf((*MockStore)(nil).SubscribeUserToPlan), arg0, arg1)
}

// UpdatePlan mocks base method.
func (m *MockStore) UpdatePlan(arg0 context.Context, arg1 data.UpdatePlanParams) (data.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlan", arg0, arg1)
	ret0, _ := ret[0].(data.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlan indicates an expected call of UpdatePlan.
func (mr *MockStoreMockRecorder) UpdatePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlan", reflect.TypeOf((*MockStore)(nil).UpdatePlan), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 data.UpdateUserParams) (data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPlan mocks base method.
func (m *MockStore) UpdateUserPlan(arg0 context.Context, arg1 data.UpdateUserPlanParams) (data.UserPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPlan", arg0, arg1)
	ret0, _ := ret[0].(data.UserPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPlan indicates an expected call of UpdateUserPlan.
func (mr *MockStoreMockRecorder) UpdateUserPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPlan", reflect.TypeOf((*MockStore)(nil).UpdateUserPlan), arg0, arg1)
}
