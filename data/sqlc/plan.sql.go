// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plan.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE id = $1
`

func (q *Queries) DeletePlan(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlan, id)
	return err
}

const getAllPlans = `-- name: GetAllPlans :many
SELECT id, plan_name, plan_amount, created_at, updated_at FROM plans
ORDER by id
LIMIT $1
OFFSET $2
`

type GetAllPlansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPlans(ctx context.Context, arg GetAllPlansParams) ([]Plan, error) {
	rows, err := q.db.Query(ctx, getAllPlans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Plan{}
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.PlanName,
			&i.PlanAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOnePlan = `-- name: GetOnePlan :one
SELECT id, plan_name, plan_amount, created_at, updated_at FROM plans
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOnePlan(ctx context.Context, id int32) (Plan, error) {
	row := q.db.QueryRow(ctx, getOnePlan, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.PlanName,
		&i.PlanAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans
SET
  plan_name = COALESCE($1, plan_name),
  plan_amount = COALESCE($2, plan_amount),
  updated_at = COALESCE($3, updated_at)
WHERE
  id = $4
RETURNING id, plan_name, plan_amount, created_at, updated_at
`

type UpdatePlanParams struct {
	PlanName   pgtype.Text      `json:"plan_name"`
	PlanAmount pgtype.Int4      `json:"plan_amount"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
	ID         int32            `json:"id"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, updatePlan,
		arg.PlanName,
		arg.PlanAmount,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.PlanName,
		&i.PlanAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
