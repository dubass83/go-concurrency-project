// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_plans.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserPlan = `-- name: DeleteUserPlan :exec
DELETE FROM user_plans
WHERE user_id = $1
`

func (q *Queries) DeleteUserPlan(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteUserPlan, userID)
	return err
}

const getAllUserPlans = `-- name: GetAllUserPlans :many
SELECT id, user_id, plan_id, created_at, updated_at FROM user_plans
ORDER by id
LIMIT $1
OFFSET $2
`

type GetAllUserPlansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUserPlans(ctx context.Context, arg GetAllUserPlansParams) ([]UserPlan, error) {
	rows, err := q.db.Query(ctx, getAllUserPlans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPlan{}
	for rows.Next() {
		var i UserPlan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlanID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneUserPlan = `-- name: GetOneUserPlan :one
SELECT id, user_id, plan_id, created_at, updated_at FROM user_plans
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetOneUserPlan(ctx context.Context, userID pgtype.Int4) (UserPlan, error) {
	row := q.db.QueryRow(ctx, getOneUserPlan, userID)
	var i UserPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserPlan = `-- name: InsertUserPlan :one
INSERT INTO user_plans (
  user_id, plan_id
) VALUES (
  $1, $2
)
RETURNING id, user_id, plan_id, created_at, updated_at
`

type InsertUserPlanParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	PlanID pgtype.Int4 `json:"plan_id"`
}

func (q *Queries) InsertUserPlan(ctx context.Context, arg InsertUserPlanParams) (UserPlan, error) {
	row := q.db.QueryRow(ctx, insertUserPlan, arg.UserID, arg.PlanID)
	var i UserPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPlan = `-- name: UpdateUserPlan :one
UPDATE user_plans
SET
  plan_id = COALESCE($1, plan_id),
  updated_at = COALESCE($2, updated_at)
WHERE
  user_id = $3
RETURNING id, user_id, plan_id, created_at, updated_at
`

type UpdateUserPlanParams struct {
	PlanID    pgtype.Int4      `json:"plan_id"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	UserID    pgtype.Int4      `json:"user_id"`
}

func (q *Queries) UpdateUserPlan(ctx context.Context, arg UpdateUserPlanParams) (UserPlan, error) {
	row := q.db.QueryRow(ctx, updateUserPlan, arg.PlanID, arg.UpdatedAt, arg.UserID)
	var i UserPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
